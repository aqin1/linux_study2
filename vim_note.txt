
	vimtutor:	vim 英文教程
	vimtutor zh:	vim 中文教程

##启动Vim
	vim +num file: 从第num行开始
	vim +/string file: 打开file，并将光标停留在第一个找到的string上
	vim -r file: 恢复上次异常退出的文件；
	vim + file: 从文件的末尾开始；

##模式切换
  //切换到正常模式(命令模式)
	ESC
	CTRL + C
	CTRL + [
	自定义jj键：vim /etc/vim/vimrc 然后写入 inoremap  jj <ESC>
  //切换到可视模式(主要用于选择)
	v:单个字符选择
	V:按行选择

##文档操作
	:saveas newfilename – 另存为
	:Sex – 水平分割一个窗口，浏览文件系统；
	:Vex – 垂直分割一个窗口，浏览文件系统；
  
##光标移动
  //基本移动
	w: 后移一个英文单词，光标停在下一个单词开头,中文当作一个单词,标点符号当作一个单词；
	e: 后移一个单词，光标停在下一个单词末尾；
	b: 前移一个单词，光标停在上一个单词开头；
	h,j,k,l 和 w,e,b: 如: 3h 左移3个字母或中字,3w 后移(右移) 3 个单词
	fc: 把光标移到同一行的下一个c字符处,c为任意字符
	Fc: 把光标移到同一行的上一个c字符处,c为任意字符
	0: 移动到行首。
	$: 移动到行尾。
	n$: 移动到第n行的行尾
	nG: 到文件第n行。
	ngg: 到文件第n行。
	n<space>	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
	
##翻屏
	n%: 到文件n%的位置。
	ctrl+e: 向下滚动一行。
	ctrl+y: 向上滚动一行。
	
##标志
  //使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。
	m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。ma,mb 表示创建a,b标志，每个标志只能拥有一处
	`{a-z}: 移动到标记位置。
	:marks 显示所有标记。
	:delmarks a b – 删除标记a和b。
	:delmarks a-c – 删除标记a、b和c。
	:delmarks a c-f – 删除标记a、c、d、e、f。
	:delmarks! – 删除当前缓冲区的所有标记。
	:help mark-motions 查看更多关于mark的知识。

##插入文本
	30i+<esc>:依次输入30,i,+,<esc>就插入了36个+组成的分割线。
	A: 在当前行最后插入；
	o: 在下面新建一行插入；
	O: 在上面新建一行插入；
	:[n]r filename 在第n行插入另一个文件的内容。
	:r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。

##改写插入
	c[n]w: 改写光标后1(n)个词。
	c[n]l: 改写光标后n个字母。
	c[n]h: 改写光标前n个字母。
	[n]cc: 修改当前[n]行。
 
##剪切复制粘贴
  //删除
	x, X	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)
	nx, nX	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。
	
  //复制
	y: 复制在可视模式下选中的文本。
	yy or Y: 复制整行文本。
	y[n]w: 复制一(n)个词。
	y[n]l: 复制光标右边1(n)个字符。
	y[n]h: 复制光标左边1(n)个字符。
	y$: 从光标当前位置复制到行尾。
	y0: 从光标当前位置复制到行首。
	:m,ny<cr> 复制m行到n行的内容。
	yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。
	y/f<cr>：这是一个比较高级的组合命令，它复制将当前位置 到下一个f之间的内容。
  
  //剪切
	d: 删除（剪切）在可视模式下选中的文本。
	d$ or D: 删除（剪切）当前位置到行尾的内容。
	d[n]w: 删除（剪切）1(n)个单词
	d[n]l: 删除（剪切）光标右边1(n)个字符。
	d[n]h: 删除（剪切）光标左边1(n)个字符。
	d0: 删除（剪切）当前位置到行首的内容
	[n]dd: 删除（剪切）1(n)行。
	:m,nd<cr> 剪切m行到n行的内容。
	daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。
	d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。
	p: 在光标之后粘贴。
	P: 在光标之前粘贴。

  //文本对象
	aw：一个词
	as：一句。
	ap：一段。
	ab：一块（包含在圆括号中的）。
	上面几个a*不能单独使用。可以跟y, d, c, v配合使用  y 复制，d 剪切，c 改写，v 可视化选择

  //寄存器
	a-z：都可以用作寄存器名。"ayy把当前行的内容放入a寄存器。
	A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如"Ayy把当前行的内容追加到a寄存器中。
	:reg 显示所有寄存器的内容。
	:reg a 显示寄存器a的内容
	""：不加寄存器索引时，默认使用的寄存器。
	"*：当前选择缓冲区，"*yy把当前行的内容放入当前选择缓冲区。
	"+：系统剪贴板。"+yy把当前行的内容放入系统剪贴板。
	
##查找与替换
  //查找
	/something: 在后面的文本中查找something。
	?something: 在前面的文本中查找something。
	n: 向后查找下一个。
	N: 向前查找下一个。  
  //替换
	:s/old/new - 用new替换当前行第一个old。
	:s/old/new/g - 用new替换当前行所有的old。
	:n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。
	:%s/old/new/g - 用new替换文件中所有的old。
	所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。
	
##排版
  //基本排版
	<< 向左缩进一个shiftwidth
	>> 向右缩进一个shiftwidth
	:le(ft) 本行文字靠左
	:ri(ght) 本行文字靠右
	
  //拼写检查
	:set spell－开启拼写检查功能
	:set nospell－关闭拼写检查功能
	]s－移到下一个拼写错误的单词
	z=－显示一个有关拼写错误单词的列表，可从中选择
	zg－告诉拼写检查器该单词是拼写正确的

  //统计字数
	g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。

##编辑多个文件
  //一次编辑多个文件
	vi a.txt b.txt c.txt
	:next(:n)编辑下一个文件。
	:previous或:N编辑上一个文件。
	:previous或:N编辑上一个文件。
	:wnext，保存当前文件，并编辑下一个文件。
	:wprevious，保存当前文件，并编辑上一个文件。
	:args 显示文件列表。
  //多标签编辑
	vim -p files: 打开多个文件，每个文件占用一个标签页。
	tabnew [file] 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。
	 gf -- 在当前标签页里打开光标下路径指定的文件
	:tabn -- 切换到下一个标签。
	:tabp -- 切换到上一个标签。
	[n]gt -- 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。
	:tabc[lose] -- 关闭当前的标签页。
	:tabo[nly] -- 关闭其它的标签页，当前标签页除外。
	:tabs -- 列出所有的标签页和它们包含的窗口。
	:tabm[ove] [N] -- 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。
	
  //缓冲区
	b的全称是buffer
	:buffers或:ls或:files 显示缓冲区列表。
	:bn[ext] -- 下一个缓冲区。
	:bp[rev] -- 上一个缓冲区。
	:b[n]或:[n]b -- 切换到第n个缓冲区。
	:bl[ast]，bf[irst] -- 切换到最后一个缓冲区，第一个缓冲区
	:nbw[ipeout] -- 彻底删除第n个缓冲区。
	:nbd[elete] -- 删除第n个缓冲区，并未真正删除，还在unlisted列表中。
	:bd[elete] n1 n2  -- 删除第n1和n2个缓冲区，并未真正删除，还在unlisted列表中。
	:ba[ll] -- 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。
	注：删除一个缓冲区并不会影响缓冲区所关联的磁盘文件，只是把该文件在内存中的映像删掉，同时打开的文件会被关闭
	
##分屏编辑
	vim -o file1 file2:水平分割窗口，同时打开file1和file2
	vim -O file1 file2:垂直分割窗口，同时打开file1和file2
	
  //水平分割
	:split(:sp) -- 把当前窗水平分割成两个窗口。
	:split filename -- 水平分割窗口，并在新窗口中显示另一个文件。
	:nsplit(:nsp) -- 水平分割出一个n行高的窗口。
	
  //垂直分割
	:vsplit(:vsp) -- 把当前窗口分割成水平分布的两个窗口。
	:[N]vne[w] -- 垂直分割出一个新窗口
	
  //关闭子窗口
	:qall -- 关闭所有窗口，退出vim。
	:wall -- 保存所有修改过的窗口。
	:only -- 只保留当前窗口，关闭其它窗口。
	:close -- 关闭当前窗口
	
  //调整窗口大小
   垂直方向：
	ctrl+w + --当前窗口增高一行。也可以用n增高n行。
	ctrl+w - --当前窗口减小一行。也可以用n减小n行。
	:resize n -- 当前窗口n行高。
	ctrl+w = -- 所有窗口同样高度。
	水平方向：
	ctrl+w < --当前窗口减少一列。也可以用n减少n列。
	ctrl+w > --当前窗口增宽一列。也可以用n增宽n列。
	
  //切换和移动窗口
	ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。
	ctrl+w p: 切换到前一个窗口。
	ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。
	ctrl+w t(b):切换到最上（下）面的窗口。<BR>
	ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。
	ctrl+w T: 将当前的窗口移动到新的标签页上。
	
##快速编辑
  //改变大小写
	gu5j（或$，或G）,可以把从光标当前位置到指定位置之间字母全部转换成小写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。
	gU5j（如$，或G）,可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如gggUG，就是把开头到最后一行之间的字母全部变为大 写。再如gU5j，把当前行和下面四行全部变成大写。

  //替换
	R: 进入替换模式，按esc回到正常模式。
	
  //撤销与重做
	[n]u: 取消一(n)个改动。
	:undo 5 -- 撤销5个改变。
	:undolist -- 你的撤销历史。
	ctrl + r: 重做最后的改动。
	:earlier 4m -- 回到4分钟前
	:later 55s -- 前进55秒
	
  //宏
	.  --重复上一个编辑动作
	qa：开始录制宏a（键盘操作记录）
	q：停止录制
	@a：播放宏a
	
##编辑特述文件
  //文件加密
	:X -- 为当前文件设置新的密码。
	:set key= -- 去除文件的密码。
	:set key=xxx -- 为当前文件设置新的密码xxx。
	
  //文件的编码
	:e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。
	:w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。
	:set fenc或:set fileencoding，查看当前文件的编码。
	在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。
	
  //文件格式
	大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。
	:e ++ff=dos filename, 让vim用dos格式打开这个文件。
	:w ++ff=mac filename, 以mac格式存储这个文件。
	:set ff，显示当前文件的格式。
	在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。
	
##辅助编程
  //安装必要软件 ctags ,它通过扫描代码库，生成关键字的索引
	sudo apt-get install exuberant-ctags
	ctags的shell下的命令：
	ctags -R	//将当前目录下及子目录的所有文件分析生成索引
	ctags *.c	//将当前目录下的 c 文件分析生成索引 
	会在当前目录下生成一个tags的纯文本文件，可以查看其内容
	ctags 默认并不会提取所有标识符的tag标签，通过参数可以生成更详细的tags文件
	ctags的vim下的命令
	:set tags=path/tags -- 告诉ctags使用哪个tag文件
	:tag xyz -- 跳到xyz的定义处，或者将光标放在xyz上按crtl+]，返回用crtl+t
	:stag xyz -- 用分割的窗口显示xyz的定义，或者crtl+w ]， 如果用C-w n ]，就会打开一个n行高的窗口
	:ptag xyz -- 在预览窗口中打开xyz的定义，热键是crtl+w }。
	:pclose -- 关闭预览窗口。热键是crtl+w z。
	:pedit abc.h -- 在预览窗口中编辑abc.h
	:psearch abc -- 搜索当前文件和当前文件include的文件，显示包含abc的行。
	
	光标移动到某个标识符上，通过按键 Ctrl + ] 就可以跳转到对应的定义位置，命令 Ctrl + o 可以回退到原来的位置，可以在当前目录下文件之间跳转
	有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。

	:[n]tnext -- 下一[n]个匹配。
	:[n]tprev -- 上一[n]个匹配。
	:tfirst -- 第一个匹配
	:tlast -- 最后一个匹配
	:tselect tagname -- 打开选择列表
	
  //一些按键
	gd: 跳转到变量或函数的定义处；
	g;: 上一个修改过的地方；
	g,: 下一个修改过的地方；
	[[: 跳转到上一个函数块开始，需要有单独一行的{。
	]]: 跳转到下一个函数块开始，需要有单独一行的{。
	[/: 跳转到当前注释块开始处；
	%: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。
   下面的括号匹配对编程很实用的。
	ci', di', yi'：修改、剪切或复制'之间的内容。
	ca', da', ya'：修改、剪切或复制'之间的内容，包含'。
	ci", di", yi"：修改、剪切或复制"之间的内容。
	ca", da", ya"：修改、剪切或复制"之间的内容，包含"。
	ci(, di(, yi(：修改、剪切或复制()之间的内容。
	ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。
	ci[, di[, yi[：修改、剪切或复制[]之间的内容。
	ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。
	ci{, di{, yi{：修改、剪切或复制{}之间的内容。
	ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。
	ci<, di<, yi<：修改、剪切或复制<>之间的内容。
	ca<, da<, ya<：修改、剪切或复制<>之间的内容，包含<>。
	
  //编译
	vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。

	如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置：

	set makeprg=javac\ abc.java
	然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：

	:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#
	%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。
	
  //快速修改窗口
	其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)

	:copen -- 打开快速修改窗口。
	:cclose -- 关闭快速修改窗口。
	快速修改窗口在make程序时非常有用，当make之后：
	
	:cl -- 在快速修改窗口中列出错误。
	:cn -- 定位到下一个错误。
	:cp -- 定位到上一个错误。
	:cr -- 定位到第一个错误。
	
  //自动补全
	Ctrl+n：插入模式下当输入完第一个字母后，再按Ctrl+n，Vim会自动出现下拉菜单，且默认选中第一个单词，继续按 Ctrl+n 可以上下选择
	Ctrl+x、Ctrl+l插入模式下输入已经存在行的第一个单词，再按Ctrl+x、Ctrl+l命令，就会列出该整行出来实现Vim行自动补全
	
  //多行缩进缩出
	正常模式下，按两下>;光标所在行会缩进。
	如果先按了n，再按两下>;，光标以下的n行会缩进。
	如果在编辑代码文件，可以用=进行调整。在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。
	或者n =，调整n行代码的缩排。
	
  //折叠
	zf -- 创建折叠的命令，可以在一个可视区域上使用该命令；
	zd -- 删除当前行的折叠；
	za -- 打开/关闭当前折叠；
	zr -- 打开嵌套的折行；
	zm -- 收起嵌套的折行；
	zR (zO) -- 打开所有折行；
	zM (zC) -- 收起所有折行；
	zj -- 跳到下一个折叠处；
	zk -- 跳到上一个折叠处；
	zo -- 打开折叠的文本；
	zc -- 收起折叠；
	zfap -- 折叠光标所在的段；

##命令行
  //命令行模式下的快捷键
	上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。
	左右方向键：左/右移一个字符。
  注：C-w 表示 crtl + w
	C-w： 向前删除一个单词。
	C-h： 向前删除一个字符，等同于Backspace。
	C-u： 从当前位置移动到命令行开头。
	C-b： 移动到命令行开头。
	C-e： 移动到命令行末尾。
	@： 重复上一次的冒号命令。
	q： 正常模式下，q然后按':'，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。
	q/和q? 可以打开查找历史记录。
	
  //执行外部命令
	:! cmd 执行外部命令。
	:!! 执行上一次的外部命令。
	:sh 调用shell，用exit返回vim。
	:r !cmd 将命令的返回结果插入文件当前位置。
	:m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。
	
##其它
  //工作目录
	:pwd 显示vim的工作目录。
	:cd path 改变vim的工作目录。
	:set autochdir 可以让vim 根据编辑的文件自动切换工作目录。
	
  //一些快捷键
	K: 打开光标所在词的manpage。
	*: 向下搜索光标所在词。
	g*: 同上，但部分符合即可。
	#: 向上搜索光标所在词。
	g#: 同上，但部分符合即可。
  注：C-g 表示crtl+g
	g C-g: 统计全文或统计部分的字数。

  //在线帮助
	:h(elp)或F1 打开总的帮助。
	:help user-manual 打开用户手册。
	命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。
	:helptags somepath 为somepath中的文档生成索引。
	:helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。
	Ctrl+] 跳转到tag主题，Ctrl+t 跳回。
	:ver 显示版本信息。
	
  //小功能
	简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。
	
	
	
					Vimtutor的一些笔记
	a - 在光标后面添加(插入), add
	A - 在行末添加(插入)    , Add
	
motion:
	$ - 行尾
	0 - 行首
	w - 单词首
	e - 单词尾
	g - 跳转
	G - 跳转
	
operator:
	x - 删除
	d - 删除
	c - 更改，删除字符串并进入插入模式
	u - 撤销，但好像不能和[number],motion配合使用
	p - put，粘贴或是置入
	r - 替换，不进入插入模式,2ra,替换两个字符为 a
	R - 替换模式，直到按<ESC>键退出
	/ - 查找，可能不能和[number],motion配合使用
	? - 反向查找，可能不能和[number],motion配合使用
	s - 替代
	y - 复制
	
	
	
	
	删除命令d的格式
		[number]d[motion]  或  d[number][motion]
		number - 表示执行命令的次数，缺省为 1
		motion - 表示
	如： 2dw 等同于 d2w 
	d$ - 从光标处删到行末尾
	d0 - 从光标处删到行首
	de - 从当前光标处删除到单词末尾，包括最后一个字符
	dw - 从当前光标处删除到下一个单词开头，不包括它的第一个字符
	ndd - 删除 n 行，n默认为 1
	d - delete
	
	2w - 光标向右(后)移动两个单词 ，词首
	3e - 光标向右(后)移动到第三个单词的末尾
	0 - 光标移动到行首
	w - word
	e - end
	
	u - 撤销最后执行的命令
	U - 撤销这一行的修改
	ctrl-r - 撤销以前的撤销命令，即撤销 u 或 U 命令
	
	p - 将最后一次删除的内容置入光标之后，P 是之前
	p - put  P - Put   ; put the text
	
	r - 按 r 然后输入要替换的一个字符,依然是正常模式
	:r filename - 提取文件内容并插入当前光标处
	:r !cmd - 将命令 cmd 的输出插入当前光标后
	R - 替换模式
	r - replace
	
	c    [number]   motion
	ce - 改变文本直到一个单词末尾，删除对应字符并进入插入模式
	cw - 改变文本直到一个单词首，删除对应字符并进入插入模式
	c - change
	
	gg - 跳到行首
	ngg - 跳到第 n 行
	G - 跳到最后一行
	nG - 跳到第 n 行
	CTRL-g 显示当前编辑文件中当前光标所在行位置>以及文件状态信息。
	g - go  , G - Goto
	
	/ - 查找
	? - 反向查找
	n - 查找下一个
	N - 查找上一个
	
	ctrl-o - 回到之前的位置(jumplist)
	ctrl-i - 跳到较新的位置(jumplist)
	注：这里位置(jumplist)是指执行过operator的位置，而不是motion
	:ju[mps] - 查看所有的位置(jumplist)
	:cle[arjumps] - 清除所有的位置(jumplist)
	
	% - 查找匹配的)、]、},光标需要在括号下,会在匹配的括号跳转
	
	查找并替换 s - Substitute 译：替代
	:[range]s[ubstitute]/{pattern}/{string}/[flags] [count]
	:s/old/new/g - 替换整行的匹配字符
	:%s/old/new/g - 替换整个文件中的每个匹配字符串
	:s/old/new - 替换该行匹配到的第一个字符串
	:n,ms/old/new/g - n,m 是首尾两行的行号
	:%s/old/new/gc - 替换整个文件中的每个匹配字符串,提示是否替换
	c 标志 - 表示替换前提示
	
	:!cmd - 执行外部shell的 cmd 命令
	 
	:w filename - 另存当前文件为filename
	v motion :w filename - 按 v 然后移动光标，将选中文本保存到文件filename中
	
	o - 在光标下方打开新行并进入插入模式
	O - 在光标方上打开新行并进入插入模式
	o - open
	
	j$ - 移动到下行行尾
	
	y - 把选中的文本复制
	yw - 复制一个单词
	
	:set ic - 查找时忽略大小写
	ic - ignore case
	:set hls[earch] - 高亮显示查找结果
	:set is - 查找短语时显示部分匹配，和:set hls配合使用，：set incsearch
	:set nohls,:set nois,:set noic - 与上三条相反
	/search\c - 仅在查找第一个search时忽略大小写
	
	ctrl-w ctrl-w - 在窗口之间切换
	:h[elp] user-manual - 查找user-manual帮助文档
	:h cmd - 用于查找cmd命令的帮助文档
	
	vim内命令
	:edit ~/.vimrc - 编辑当前用户vim配置文档，没有就会新建
	:edit /etc/vim/vimrc - 编辑系统vim配置文档
	:r $VIMRUNTIME/vimrc_example.vim - 插入vimrc示例文件
	:h vimrc-intro - 更多的vimrc配置文档
	
	ctrl-d - 显示补全命令列表
	<TAB> - 多次按<TAB>键将命令列表的命令依次补全
	上面两条命令需要确保vim不是在兼容模式下运行
	:set nocp - 不是在兼容模式下运行
	
	
	
	

帮助命令：:h commad   如 :h q
在正常模式下修改命令的格式是：
               operator   [number]   motion
			或 [number]   operator   motion
			或 [number]   operator
     其中：
       operator - 操作符，代表要做的事情，比如 d 代表>删除
       [number] - 可以附加的数字，代表动作重复的次数
       motion   - 动作，代表在所操作的文本上的移动
	   例如 w 代表单词(word)，
       $ 代表行末等等。
	
	
	
	
	
	
	
	
	

  
  
  
  
